[comment encoding = UTF-8 /]
[module ormLiteHelper('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]

[template public generateOrmLiteHelper(entities : OrderedSet(Class))]

[file ('domain/OrmLiteHelper.java', false, 'UTF-8')]
package [entities->at(1).getPackagePath()/].domain;

import java.sql.SQLException;
import java.util.List;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.RuntimeExceptionDao;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;


public class OrmLiteHelper extends OrmLiteSqliteOpenHelper {
 
	private Context context;

	private static final String TAG = "OrmLiteHelper";
	private static final String DB_NAME = "OrmDummy.db";[comment]TODO: App Name[/comment]
	private static final int DB_VERSION = 1;
 
	private Dao<SimpleData, Integer> simpleDao = null;
	private RuntimeExceptionDao<SimpleData, String> simpleRuntimeDao = null;
 
	public OrmLiteHelper(Context context) {
		super(context, DB_NAME, null, DB_VERSION);
		this.context = context;
	}
 
	public Dao<SimpleData, Integer> getDao() throws SQLException {
		if (simpleDao == null) {
			simpleDao = getDao(SimpleData.class);
		}
		return simpleDao;
	}
 
	public RuntimeExceptionDao<SimpleData, String> getSimpleDataDao() {
		if (simpleRuntimeDao == null) {
			simpleRuntimeDao = getRuntimeExceptionDao(SimpleData.class);
		}
		return simpleRuntimeDao;
	}
	
	[for (c : Class | entities)]
	public List<[c.name.toUpperFirst()/]> GetAll[c.name.toUpperFirst()/]() {
		[comment]DatabaseHelper helper = new DatabaseHelper(_context);
		RuntimeExceptionDao<SimpleData, String> simpleDao = helper.getSimpleDataDao();
		List<SimpleData> list = simpleDao.queryForAll();
		return list;[/comment]
	}

	public int add[c.name.toUpperFirst()/]([c.name.toUpperFirst()/] [c.name.toLowerFirst()/]) {
		RuntimeExceptionDao<SimpleData, String> dao = get[c.name.toUpperFirst()/]Dao();
		int i = dao.create([c.name.toLowerFirst()/]);
		return i;
	}

	public void deleteAll[c.name.toUpperFirst()/]s() {
		RuntimeExceptionDao<SimpleData, String> dao = getSimpleDataDao();
		List<SimpleData> list = dao.queryForAll();
		dao.delete(list);
	}
	[/for]

	public void createTables(ConnectionSource connectionSource) {
		[for (c : Class | entities)]
		TableUtils.createTable(connectionSource, [c.name.toUpperFirst()/].class);
		[/for]
	}

	public void dropTables(ConnectionSource connectionSource) {
		[for (c : Class | entities)]
		TableUtils.dropTable(connectionSource, [c.name.toUpperFirst()/].class, true);
		[/for]
	}
	
	@Override
	public void close() {
		super.close();
		[comment]simpleRuntimeDao = null;[/comment]
	}

	@Override
	public void onCreate(SQLiteDatabase db, ConnectionSource connectionSource) {
		try {
			Log.i(TAG, "Creating the tables...");
			createTables(connectionSource);
		} catch(SQLException e) {
			Log.e(TAG, "Not possible to create the tables", e);
		}
	}
 
	@Override
	public void onUpgrade(SQLiteDatabase db, ConnectionSource connectionSource, int oldVersion, int newVersion) {
		try {
			Log.i(TAG,
				"Upgrading database from version " + oldVersion + " to "
		        + newVersion + ", which will destroy all old data...");
	
			dropTables(connectionSource);
		} catch(SQLException e) {
			Log.e(TAG, "Not possible to drop the tables", e);
		}
		onCreate(db, connectionSource);
	}

}
[/file]
[/template]
