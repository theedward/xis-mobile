[comment encoding = UTF-8 /]
[module webService('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]

[template public generateRemoteService(i : Interface)]

[file ('src/' + i.getPackageDirectoryPath() + '/'.concat(i.name.toUpperFirst()).concat('ServiceStub.java'), false, 'UTF-8')]
package [i.getPackagePath()/];

import java.util.ArrayList;

import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicNameValuePair;

import android.util.Log;

public class [i.name.toUpperFirst()/]ServiceStub {
	
	public static final String url = "[i.getRemoteServiceUrl()/]";

	[for (o : Operation | i.getXisServiceMethods())]
	public static [o.getReturnResultType()/] [o.name.toLowerFirst()/]([o.ownedParameter.writeParameterTypeAndName()->sep(', ')/]) {
		[o.writeMethodBody()/]
	}
	[/for]
}
[/file]
[/template]

[template private getReturnResultType(o : Operation) post (trim())]
[if (o.getReturnResult().oclIsUndefined())]
void
[else]
[o.getReturnResult().type.getParameterType()/]
[/if]
[/template]

[template private getParameterType(t : Type) post (trim())]
[if (not t.oclIsUndefined())]
[let name : String = t.toString().toLower()]
[if (name.contains('int'))]
int
[elseif (name.contains('integer'))]
Integer
[elseif (name.contains('float'))]
float
[elseif (name.contains('long'))]
long
[elseif (name.contains('short'))]
short
[elseif (name.contains('double'))]
double
[elseif (name.contains('char'))]
char
[elseif (name.contains('string'))]
String
[elseif (name.contains('byte'))]
byte
[elseif (name.contains('boolean'))]
boolean
[/if]
[/let]
[/if]
[/template]

[template private writeParameterTypeAndName(p : Parameter) post (trim())]
[p.type.getParameterType()/] [p.name.toLowerFirst()/]
[/template]

[template private writeMethodBody(o : Operation) post (trim())]
[if (not o.getReturnResult().oclIsUndefined())]
[o.getReturnResult().type.name/] result = null;
[/if]
HttpGet request = new HttpGet(url + "/" + "[o.name.toLowerFirst()/]");

try {
[if (o.ownedParameter->size() > 0)]
	ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
	[for (p : Parameter | o.getInParameters())]
	params.add(new BasicNameValuePair("[p.name.toLowerFirst()/]", [p.name.toLowerFirst()/]));
	[/for]
	request.setEntity(new UrlEncodedFormEntity(params));
[/if]
	WebServiceCallTask t = new WebServiceCallTask();
	[if (not o.getReturnResult().oclIsUndefined())]
    result = t.execute(request).get();
	[else]
	t.execute(request);
	[/if]
} catch (Exception e) {
	Log.e("WS", "Exception while calling the service [o.name.toLowerFirst()/]: " + e);
}
[if (not o.getReturnResult().oclIsUndefined())]
return result;
[/if]
[/template]

[template public generateAsyncTask(m : Model)]

[file ('src/' + '/WebServiceCallTask.java', false, 'UTF-8')]
package [comment][i.getPackagePath()/][/comment];

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.impl.client.DefaultHttpClient;

import android.os.AsyncTask;
import android.util.Log;

public class WebServiceCallTask extends AsyncTask<HttpRequestBase, Void, String> {

	@Override
	protected String doInBackground(HttpRequestBase... params) {
		HttpClient client = new DefaultHttpClient();

		try {
			HttpResponse response = client.execute(params['['/]0[']'/]);
			StatusLine statusLine = response.getStatusLine();
			int statusCode = statusLine.getStatusCode();
			if (statusCode == HttpStatus.SC_OK) {
				HttpEntity entity = response.getEntity();
				ByteArrayOutputStream out = new ByteArrayOutputStream();
                entity.writeTo(out);
                out.close();
				result = out.toString();
			} else {
				Log.e("WS", "Failed to call web service. Code:" + statusCode);
			}
		} catch (ClientProtocolException e) {
			Log.e("WS", "Exception while calling web service: " + e.getMessage());
		} catch (IOException e) {
			Log.e("WS", "Exception while calling web service: " + e.getMessage());
		}		
	}
}
[/file]
[/template]
