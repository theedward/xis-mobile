[comment encoding = UTF-8 /]
[module pojo('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]

[template public generatePOJO(c : Class)]

[file ('domain/'.concat(c.name.toUpperFirst()).concat('.java'), false, 'UTF-8')]
package [c.getPackagePath()/].domain;

[if (c.isPersistent())]
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

[/if]

[if (c.isPersistent())]
@DatabaseTable(tableName = "[c.name.toUpperFirst()/]")
[/if]
public class [c.name.toUpperFirst()/] {
[if (c.hasXisEntityAttributes())]
	
	[c.generateAttributes()/]
	[c.generateConstructors()/]
	[c.generateGettersAndSetters()/]
	[if (not c.isPersistent())]

	[c.generateEqualsMethods()/]
	[/if]
[else]
	[writeTODO()/]
[/if]
}
[/file]
[/template]

[template public generateConstructors(c : Class)]
public [c.name.toUpperFirst()/]() {
	[if (c.isPersistent())]
	// Non-Arg constructor needed by OrmLite
	[/if]
}

public [c.name.toUpperFirst()/]([c.getXisAttributesForConstructor()/]) {
	[for (p : Property | c.getXisEntityAttributes())]
	this.[p.getXisEntityAttributeName().toLowerFirst()/] = [p.getXisEntityAttributeName().toLowerFirst()/];
	[/for]
}

[/template]

[template public getXisAttributesForConstructor(c : Class) post(trim())]
[c.getXisEntityAttributes().getXisAttributeTypeAndName()->sep(', ')/]
[/template]

[template public getXisAttributeTypeAndName(p : Property)]
[p.getXisEntityAttributeType()/] [p.getXisEntityAttributeName().toLowerFirst()/]
[/template]

[template public generateAttributes(c : Class)]
[for (p : Property | c.getXisEntityAttributes())]
[if (c.isPersistent())]
@DatabaseField[if (p.isKey())](id = true)[/if]
[/if]
private [p.getXisAttributeTypeAndName()/];
[/for]
[/template]

[template public generateGettersAndSetters(c : Class) post(trim())]
[for (p : Property | c.getXisEntityAttributes()) separator('\n')]
public [p.getXisEntityAttributeType()/] get[p.getXisEntityAttributeName().toUpperFirst()/]() {
	return this.[p.getXisEntityAttributeName().toLowerFirst()/];
}

public void set[p.getXisEntityAttributeName().toUpperFirst()/]([p.getXisEntityAttributeType()/] [p.getXisEntityAttributeName().toLowerFirst()/]) {
	this.[p.getXisEntityAttributeName().toLowerFirst()/] = [p.getXisEntityAttributeName().toLowerFirst()/];
}
[/for]
[/template]

[template public generateEqualsMethods(c : Class)]
[let attrs : Set(Property) = c.getXisEntityAttributes()]
@Override
public boolean equals(Object obj) {
	if (obj == null)
		return false;
	if (obj == this)
		return true;
	if (!(obj instanceof [c.name.toUpperFirst()/]))
		return false;
	
	[c.name.toUpperFirst()/] c = ([c.name.toUpperFirst()/]) obj;	
	return [attrs->getEqualsCondition()/];
}
	
@Override
public int hashCode() {
	String code = [attrs->getHashCodeCondition()/];
	return code.hashCode();
}
[/let]
[/template]

[template public getEqualsCondition(ps : Set(Property)) post (trim())]
[for (p : Property | ps) separator ('\t&& ')]
this.[p.getXisEntityAttributeName()/] == c.[p.getXisEntityAttributeName()/]
[/for]
[/template]

[template public getHashCodeCondition(ps : Set(Property))]
[ps.getXisEntityAttributeName().toLowerFirst()->sep(' + ')/]
[/template]
