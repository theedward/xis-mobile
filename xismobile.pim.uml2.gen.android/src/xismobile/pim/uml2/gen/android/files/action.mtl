[comment encoding = UTF-8 /]
[module action('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template private getXisArgumentsTypeAndName(p : Parameter)]
[p.getXisArgumentType()/] [p.name.toLowerFirst()/]
[/template]

[template private getXisArgumentsForCall(o : Operation)]
[o.ownedParameter.getXisArgumentsTypeAndName()->sep(', ')/]
[/template]

[template public writeXisAction(o : Operation) post (trim())]
[if (o.isCancelAction())]
finish();
[elseif (o.performsNavigation())]
Intent intent = new Intent(this, [o.getNavigation().toUpperFirst()/]Activity.class);
[/if]
[if (o.isCreateAction())]
[let name : String = o.getXisArgumentValueByName('entityName')]
[let entity : Class = getModel().getXisEntityByName(name)->at(1)]
[name.toLowerFirst()/] = new [name.toUpperFirst()/]();
[comment @TODO
// Check parent
// if menu or IS get (master entity)
// if form (check entity type)
// check persistency
/]
[entity.getDao()/].create[name.toUpperFirst()/]([name.toLowerFirst()/]);
[/let]
[/let]
[elseif (o.isReadAction())]
[let name : String = o.getXisArgumentValueByName('entityName')]
[let entity : Class = getModel().getXisEntityByName(name)->at(1)]
[name.toLowerFirst()/] = [entity.getDao()/].get[name.toUpperFirst()/]ById(String id);
[/let]
[/let]
[elseif (o.isUpdateAction())]
[let name : String = o.getXisArgumentValueByName('entityName')]
[let entity : Class = getModel().getXisEntityByName(name)->at(1)]
[entity.getDao()/].update[name.toUpperFirst()/]([name.toLowerFirst()/]);
[/let]
[/let]
[elseif (o.isDeleteteAction())]
[let name : String = o.getXisArgumentValueByName('entityName')]
[let entity : Class = getModel().getXisEntityByName(name)->at(1)]
[entity.getDao()/].delete[name.toUpperFirst()/]([name.toLowerFirst()/]);
[/let]
[/let]
[elseif (o.isDeleteteAllAction())]
[let name : String = o.getXisArgumentValueByName('entityName')]
[let entity : Class = getModel().getXisEntityByName(name)->at(1)]
[entity.getDao()/].deleteAll[name.toUpperFirst()/]s();
[/let]
[/let]
[elseif (o.isOpenBrowserAction())]
Intent i = new Intent(Intent.ACTION_VIEW);
i.setData(Uri.parse("[o.getOpenBrowserActionUrl()/]"));
startActivity(i);
[elseif (o.isWebServiceAction())]
	[if (o.xisRemoteServiceExists())]
[writeXisRemoteServiceFullName(o.name)/]([o.writeXisRemoteServiceArguments()/]);
	[/if]
[elseif (o.isCustomAction())]
[o.writeCustomActionCall()/]
[/if]
[if (not o.isOpenBrowserAction() and o.performsNavigation())]
startActivity(intent);
[/if]
[/template]

[template private getDao(c : Class) post (trim())]
[if (c.isPersistent())]
helper
[else]
manager
[/if]
[/template]

[**
 * WebService Actions templates 
 */]

[template public writeWebServiceArea(c : Class)]
[let wsl : Set(Operation) = c.getAllWebServiceActions()]
[if (wsl->size() > 0)]
/** WebService Actions Region */
	[for (o : Operation | wsl) separator ('\n')]
// Check what to do in this case
	[/for]
[/if]
[/let]
[/template]

[template private writeParameterDefaultValue(p : Parameter)]
[if (p.type.name.toLower() = 'string' or p.type.name.toLower() = 'char')]
"[p.default/]"
[else]
[p.default/]
[/if]
[/template]

[template private writeXisRemoteServiceArguments(o : Operation) post (trim())]
[o.ownedParameter.writeParameterDefaultValue()->sep(', ')/]
[/template]

[**
 * Custom Actions templates 
 */]

[template public writeCustomActionArea(cls : Set(Operation)) post (trim())]
/** Custom Actions Region */
[for (o : Operation | cls) separator ('\n')]
[o.writeCustomActionDeclaration()/]
[/for]
[/template]

[template private writeCustomActionCall(o : Operation)]
[o.name.toLowerFirst()/]([o.getXisArgumentsForCall()/]);
[/template]

[template public writeCustomActionDeclaration(o : Operation)]
public void [o.name.toLowerFirst()/]([o.getXisArgumentsForCall()/]) {
	[writeTODO()/]
}
[/template]

[template private writeXisArgumentType(p : Parameter) post (trim())]
[if (p.type.name.toLower() = 'image' or p.type.name.toLower() = 'url')]
String
[else]
[p.type.name/]
[/if]
[/template]
