[comment encoding = UTF-8 /]
[module action('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template private getXisArgumentsTypeAndName(p : Parameter)]
[p.getXisArgumentType()/] [p.name.toLowerFirst()/]
[/template]

[template private getXisArgumentsForCall(o : Operation)]
[o.getInParameters().getXisArgumentsTypeAndName()->sep(', ')/]
[/template]

[template public writeXisAction(o : Operation) post (trim())]
[if (o.isCancelAction())]
finish();
[elseif (o.isOpenBrowserAction())]
Intent i = new Intent(Intent.ACTION_VIEW);
i.setData(Uri.parse("[o.getOpenBrowserActionUrl()/]"));
startActivity(i);
[elseif (o.performsNavigation())]
Intent intent = new Intent(this, [o.getNavigation().toUpperFirst()/]Activity.class);
[/if]
[if (o.isCrudAction())]
[let widget : Class = o.getCrudOperationEntityContextWidget()]
[let entity : Class = o.getCrudOperationEntity(widget)]
[if (o.performsNavigation())]
	[if (not o.isCreateAction())]
intent.putExtra("[entity.name.toUpperFirst()/]Id", [entity.name.toLowerFirst()/].getId());
	[/if]
[elseif (o.isCreateAction())]
[entity.name.toLowerFirst()/] = new [entity.name.toUpperFirst()/]();
[widget.writeCrudActionEntitySetters(entity)/]
[entity.getDao()/].create[entity.name.toUpperFirst()/]([entity.name.toLowerFirst()/]);
[elseif (o.isReadAction())]
[entity.name.toLowerFirst()/] = [entity.getDao()/].get[entity.name.toUpperFirst()/]ById(String id);
[elseif (o.isUpdateAction())]
[widget.writeCrudActionEntitySetters(entity)/]
[entity.getDao()/].update[entity.name.toUpperFirst()/]([entity.name.toLowerFirst()/]);
[elseif (o.isDeleteteAction())]
[entity.getDao()/].delete[entity.name.toUpperFirst()/]([entity.name.toLowerFirst()/]);
[elseif (o.isDeleteteAllAction())]
[entity.getDao()/].deleteAll[entity.name.toUpperFirst()/]s();
[/if]
[/let]
[/let]
[elseif (o.isOKAction())]
[let widget : Class = o.getCrudOperationEntityContextWidget()]
[let entity : Class = o.getCrudOperationEntity(widget)]
[let space : Class =
	if widget.isXisInteractionSpace()
	then widget
 	else widget.getParentXisInteractionSpace()
	endif]
[for (op : Operation | space.getInboundCrudOperations(entity.name))]
	[if (op.isCreateAction())]
[entity.name.toLowerFirst()/] = new [entity.name.toUpperFirst()/]();
[widget.writeCrudActionEntitySetters(entity)/]
[entity.getDao()/].create[entity.name.toUpperFirst()/]([entity.name.toLowerFirst()/]);
	[elseif (op.isReadAction())]
[entity.name.toLowerFirst()/] = [entity.getDao()/].get[entity.name.toUpperFirst()/]ById(String id);
	[elseif (op.isUpdateAction())]
[widget.writeCrudActionEntitySetters(entity)/]
[entity.getDao()/].update[entity.name.toUpperFirst()/]([entity.name.toLowerFirst()/]);
	[elseif (op.isDeleteteAction())]
[entity.getDao()/].delete[entity.name.toUpperFirst()/]([entity.name.toLowerFirst()/]);
	[elseif (op.isDeleteteAllAction())]
[entity.getDao()/].deleteAll[entity.name.toUpperFirst()/]s();
	[/if]
[/for]
[/let]
[/let]
[/let]
[elseif (o.isWebServiceAction() and o.xisRemoteServiceExists())]
[writeXisRemoteServiceFullName(o.name)/]([o.writeXisRemoteServiceArguments()/]);
[elseif (o.isCustomAction())]
[o.writeCustomActionCall()/]
[/if]
[if (o.performsNavigation())]
startActivity(intent);
[/if]
[/template]

[template private getDao(c : Class) post (trim())]
[if (c.isPersistent())]
helper
[else]
manager
[/if]
[/template]

[template private writeCrudActionEntitySetters(w : Class, e : Class) post (trim())]
[if (w.isXisInteractionSpace())]
[for (el : Class | w.ownedElement->selectByType(Class))]
	[if (el.isXisTextBox())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisTextBox()))/](mTextBox[el.name.toUpperFirst()/].getText().toString());
	[elseif (el.isXisCheckBox())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisCheckBox()))/](mCheckBox[el.name.toUpperFirst()/].isChecked());
	[elseif (el.isXisDatePicker())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisDatePicker()))/]mDatePicker([el.name.toUpperFirst()/].getText().toString());
	[elseif (el.isXisTimePicker())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisTimePicker()))/](mTimePicker[el.name.toUpperFirst()/].getText().toString());
	[elseif (el.isXisDropdown())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisDropdown()))/](mDropdown[el.name.toUpperFirst()/].getSelectedItem().toString());
	[/if]
[/for]
[elseif (w.isXisMenu())]
[comment @TODO Check what to do in this case /]
[else]
[for (el : Class | w.allOwnedElements()->selectByType(Class))]
	[if (el.isXisTextBox())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisTextBox()))/](mTextBox[el.name.toUpperFirst()/].getText().toString());
	[elseif (el.isXisCheckBox())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisCheckBox()))/](mCheckBox[el.name.toUpperFirst()/].isChecked());
	[elseif (el.isXisDatePicker())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisDatePicker()))/]mDatePicker([el.name.toUpperFirst()/].getText().toString());
	[elseif (el.isXisTimePicker())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisTimePicker()))/](mTimePicker[el.name.toUpperFirst()/].getText().toString());
	[elseif (el.isXisDropdown())]
[e.writeEntitySetter(el.getXisSimpleWidgetEntityAttributeName(el.getXisDropdown()))/](mDropdown[el.name.toUpperFirst()/].getSelectedItem().toString());
	[/if]
[/for]
[/if]
[/template]

[template private writeEntitySetter(e : Class, s : String) post (trim())]
[let p : Set(Property) = e.getXisEntityAttributes()
		->select(a : Property | s.toLower().contains(a.name.toLower()))]
[if (p->size() = 1)]
[e.name.toLowerFirst()/].set[p.name.toUpperFirst()/]
[/if]
[/let]
[/template]

[**
 * WebService Actions templates 
 */]

[template private writeParameterDefaultValue(p : Parameter)]
[if (p.type.name.toLower() = 'string' or p.type.name.toLower() = 'char')]
"[p.default/]"
[else]
[p.default/]
[/if]
[/template]

[template private writeXisRemoteServiceArguments(o : Operation) post (trim())]
[o.getInParameters().writeParameterDefaultValue()->sep(', ')/]
[/template]

[**
 * Custom Actions templates 
 */]

[template public writeCustomActionArea(cls : Set(Operation)) post (trim())]
/** Custom Actions Region */
[for (o : Operation | cls) separator ('\n')]
[o.writeCustomActionDeclaration()/]
[/for]
[/template]

[template private writeCustomActionCall(o : Operation)]
[o.name.toLowerFirst()/]([o.getXisArgumentsForCall()/]);
[/template]

[template public writeCustomActionDeclaration(o : Operation)]
public void [o.name.toLowerFirst()/]([o.getXisArgumentsForCall()/]) {
	[writeTODO()/]
}
[/template]

[template private writeXisArgumentType(p : Parameter) post (trim())]
[if (p.type.name.toLower() = 'image' or p.type.name.toLower() = 'url')]
String
[else]
[p.type.name/]
[/if]
[/template]
