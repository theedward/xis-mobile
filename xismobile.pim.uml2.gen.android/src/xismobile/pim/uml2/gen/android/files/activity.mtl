[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::widget /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateActivity(c : Class)]
[file ('src/'.concat(c.name.toUpperFirst().concat('Activity.java')), false, 'UTF-8')]
[let widgets : OrderedSet(Class) = c.getWidgetsWithGestures()]
package [c.getPackagePath()/];

import android.os.Bundle;
import android.app.Activity;
[if (c.hasMenu())]
import android.view.Menu;
[/if]
[if (widgets->size() > 0)]

import xis_mobile.library.widgets.*;
[/if]
[for (entity : Class | c.getInteractionSpaceReferencedEntities())]
import domain.[entity.name.toUpperFirst()/];
[/for]

public class [c.name.toUpperFirst()/]Activity extends Activity {

[if (c.needsDbConnection())]
	private OrmLiteHelper helper;
[elseif (c.needsDomainViews())]
	private DomainEntityManager manager;
[/if]
	[for (w : Class | widgets)]
	private [w.writeWidgetTypeAndName()/];
	[/for]

	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerCase()/]);
		[if (c.needsDbConnection())]
		getDbHelper();
		[elseif (c.needsDomainViews())]
		getManager();
		[/if]
		[if (widgets->size() > 0)]
		initializeWidgets();
		[/if]
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		[if (c.needsDbConnection())]
		if (helper != null) {
			OpenHelperManager.releaseHelper();
			helper.close();
			helper = null;
		}
		[elseif (c.needsDomainViews())]
		if (manager != null) {
			manager = null;
		}
		[/if]
	}
	[if (widgets->size() > 0)]

	public void initializeWidgets() {
		[for (w : Class | widgets)]
		initialize[w.getWidgetName().toUpperFirst()/]();
		[/for]
	}

	[for (w : Class | widgets)]
	public void initialize[w.getWidgetName().toUpperFirst()/]() {
		[w.initializeWidget()/]
	}
	[/for]
	[/if]
[/let]
[if (c.hasMenu())]
	[let m : Class = c.getMenu()]

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.[m.name.toLowerFirst()/], menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
	[for (it : Class | m.getItems())]
		case R.id.item_[it.name.toLowerCase()/]:
	[if (it.hasXisAction())]
		[let op : Operation = it.getXisAction()]
		[op.writeXisAction()/]
		[/let]
	[/if]
			return true;
	[/for]
		default:
			return super.onOptionsItemSelected(item);
		}
	}
	[/let]
[/if]
[let wsl : Set(Operation) = c.getAllWebServiceActions()]
	[if (wsl->size() > 0)]

	[c.writeWebServiceArea()/]
	[/if]
[/let]
[let cls : Set(Operation) = c.getAllCustomActions()]
	[if (cls->size() > 0)]

	[cls->writeCustomActionArea()/]
	[/if]
[/let]
[if (c.needsDbConnection())]

	private OrmLiteHelper getDbHelper() {
		if (helper == null) {
			helper = OpenHelperManager.getHelper(getApplicationContext(), OrmLiteHelper.class); 
		}
		return helper;
	}
[elseif (c.needsDomainViews())]
	private DomainEntityManager getManager() {
		if (manager == null) {
			manager = new DomainEntityManager(getApplicationContext());  
		}
		return manager;
	}	
[/if]
}
[/file]
[/template]

[template public writeWidgetTypeAndName(c : Class)]
[if (c.isXisLabel())]
XisLabel label[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
XisTextBox editText[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
XisCheckBox checkBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
XisButton button[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
XisLink link[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
XisImage image[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
XisDatePicker datePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
XisTimePicker timePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
XisWebView webView[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
XisMapView mapView[c.name.toUpperFirst()/]
[elseif (c.isList())]
ListView list[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
Spinner spinner[c.name.toUpperFirst()/]
[/if]
[/template]
