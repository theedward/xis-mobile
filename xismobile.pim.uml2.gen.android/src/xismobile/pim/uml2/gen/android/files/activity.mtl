[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]

[template public generateActivity(c : Class)]
[file ('src/'.concat(c.name.toUpperFirst().concat('Activity.java')), false, 'UTF-8')]
package [c.getPackagePath()/];

import android.os.Bundle;
import android.app.[isListActivity()/]Activity;
[if (c.hasMenu())]
import android.view.Menu;
[/if]


public class [c.name.toUpperFirst()/]Activity extends [isListActivity()/]Activity {

	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerCase()/]);
	}

[if (c.hasMenu())]
	[let m : Class = c.getMenu()]
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.[m.name.toLowerFirst()/], menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
	[for (it : Class | m.getItems())]
		case R.id.item_[it.name.toLowerCase()/]:
	[if (it.hasXisAction())]
		[let op : Operation = it.getXisAction()]
		[if (op.isCancelAction())]
			finish();
		[elseif (op.isNavigateToAction())]
			[if (op.XisArgumentExists('interactionSpace', 'value'))]
			Intent intent = new Intent(this, [op.getXisArgumentValueByName('interactionSpace', 'value').toUpperFirst()/]Activity.class);
			startActivity(intent);
			[else]
			[writeTODO()/]
			[/if]
		[elseif (op.isSaveAction())]
		[comment] TODO Create/Update Entity by name[/comment]
		[elseif (op.isDeleteteAction())]
		[comment] TODO Delete Entity by name[/comment]
		[elseif (op.isDeleteteAllAction())]
		[comment] TODO Delete all entities[/comment]
		[elseif (op.isWebServiceAction())]
			[op.name.toLowerFirst()/]();
		[elseif (op.isCustomAction())]
			[op.writeCustomActionCall()/]
		[/if]
		[/let]
	[/if]
			return true;
	[/for]
		default:
			return super.onOptionsItemSelected(item);
		}
	}
	[/let]
[/if]

[if (true)]
/** WebService Actions Area */
[comment] TODO writeWebServiceActions[/comment]
[/if]

[if (true)]
/** Custom Actions Area */
[comment] TODO writeCustomOperations[/comment]
[/if]

}
[/file]
[/template]

[template public writeCustomActionCall(o : Operation)]
[o.name.toUpperFirst()/]([o.getXisArgumentsForCall()/]);
[/template]

[template public writeCustomActionDeclaration(o : Operation)]
public void [o.name.toUpperFirst()/]([o.getXisArgumentsForCall()/]) {
	[writeTODO()/]
}
[/template]

[template public getXisArgumentsForCall(o : Operation)]
[o.getXisArguments().getXisArgumentsTypeAndName()->sep(', ')/]
[/template]

[template public getXisArgumentsTypeAndName(p : Parameter)]
[p.getXisArgumentType()/] [p.getXisArgumentName().toLowerFirst()/]
[/template]

[template public writeWebServiceDeclaration(o : Operation)]
public void [o.name.toLowerFirst()/]() {
	HttpClient client = new DefaultHttpClient();
	HttpGet httpGet = new HttpGet("[comment URL/]");

	try {
		HttpResponse response = client.execute(httpGet);
		StatusLine statusLine = response.getStatusLine();
		int statusCode = statusLine.getStatusCode();
		if (statusCode == 200) {
			HttpEntity entity = response.getEntity();
			InputStream content = entity.getContent();
			// TODO: Process response
		} else {
			Log.e("WS", "Failed call to WS [o.name.toLowerFirst()/] code:" + statusCode);
		}
	} catch (ClientProtocolException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
}
[/template]
