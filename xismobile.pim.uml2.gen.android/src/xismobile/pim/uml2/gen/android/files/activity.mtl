[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::widget /]
[import xismobile::pim::uml2::gen::android::files::menu /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateActivity(c : Class)]
[file ('src/'.concat(c.name.toUpperFirst().concat('Activity.java')), false, 'UTF-8')]
[let widgets : Set(Class) = c.getXisWidgets()]
package [c.getPackagePath()/];

import android.os.Bundle;
import android.app.Activity;
[if (c.hasMenu())]
import android.view.Menu;
[/if]
[if (widgets->size() > 0)]

import xis_mobile.library.widgets.*;
[/if]

[let entities : Sequence(Class) = c.getInteractionSpaceReferencedEntities()]
[for (entity : Class | entities)]
import domain.[entity.name.toUpperFirst()/];
[/for]

public class [c.name.toUpperFirst()/]Activity extends Activity {

[let dbNeeded : Boolean = entities->needsDbHelper()]
[let managerNeeded : Boolean = entities->needsEntityManager()]
[if (dbNeeded)]
	private OrmLiteHelper helper;
[elseif (managerNeeded)]
	private DomainEntityManager manager;
[/if]
	[writeWidgetVariables(widgets)/]
[if (entities->size() > 0)]
	[if (c.isMainScreen())]
	// Load BE entities (Master, Details & References)
	[for (master : Class | c.getMasterEntities())]
	private List<[master.name.toUpperFirst()/]> [master.name.toLowerFirst()/]s;
	[/for]
	[else]
	// get referenced entities
	[/if]
[/if]

	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerCase()/]);
	[if (entities->size() > 0)]
		[if (dbNeeded)]
		getDbHelper();
		[if (c.isMainScreen())]
		[for (ent : Class | c.getMasterEntities())]
		[ent.name.toLowerFirst()/]s = helper.getAll[ent.name.toUpperFirst()/]s();
		[/for]
		[/if]
		[elseif (managerNeeded)]
		getManager();
		[if (c.isMainScreen())]
		[for (ent : Class | c.getMasterEntities())]
		[ent.name.toLowerFirst()/]s = manager.getAll[ent.name.toUpperFirst()/]s();
		[/for]
		[/if]
		[/if]
	[/if]
		[if (widgets->size() > 0)]
		initializeWidgets();
		[/if]
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
	[if (entities->size() > 0)]
		[if (dbNeeded)]
		if (helper != null) {
			OpenHelperManager.releaseHelper();
			helper.close();
			helper = null;
		}
		[elseif (managerNeeded)]
		if (manager != null) {
			manager = null;
		}
		[/if]
	[/if]
	}
	[if (widgets->size() > 0)]

	public void initializeWidgets() {
		[for (w : Class | widgets)]
		initialize[w.getWidgetName().toUpperFirst()/]();
		[/for]
	}

	[for (w : Class | widgets)]
	public void initialize[w.getWidgetName().toUpperFirst()/]() {
		[w.initializeWidget('')/]
	}
	[writeWidgetInit(w.getXisWidgets())/]
	[/for]
	[/if]
[if (c.hasMenu())]
	[let m : Class = c.getMenu()]
	[generateMenu(m) /]

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.[m.name.toLowerFirst()/]_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		[for (it : Class | m.getItems())]
			case R.id.[it.name.toLowerCase()/]_item:
		[if (it.hasXisAction())]
			[let op : Operation = it.getXisAction()]
			[op.writeXisAction()/]
			[/let]
		[/if]
				return true;
		[/for]
			default:
				return super.onOptionsItemSelected(item);
		}
	}
	[/let]
[/if]
[let wsl : Set(Operation) = c.getAllWebServiceActions()]
	[if (wsl->size() > 0)]

	[c.writeWebServiceArea()/]
	[/if]
[/let]
[let cls : Set(Operation) = c.getAllCustomActions()]
	[if (cls->size() > 0)]

	[cls->writeCustomActionArea()/]
	[/if]
[/let]
[if (dbNeeded)]

	private OrmLiteHelper getDbHelper() {
		if (helper == null) {
			helper = OpenHelperManager.getHelper(getApplicationContext(), OrmLiteHelper.class); 
		}
		return helper;
	}
[elseif (managerNeeded)]

	private DomainEntityManager getManager() {
		if (manager == null) {
			manager = new DomainEntityManager(getApplicationContext());  
		}
		return manager;
	}	
[/if]
}
[/let]
[/let]
[/let]
[/let]
[/file]
[/template]

[template public writeWidgetVariables(widgets : Set(Class)) post (trim())]
[if (not widgets->oclIsUndefined())]
[for (w : Class | widgets)]
[if (w.isXisCompositeWidget() and w.isForm())]
[writeWidgetVariables(w.getXisWidgets())/]
[else]
private [w.writeWidgetTypeAndName()/];
[/if]
[/for]
[/if]
[/template]

[template public writeWidgetInit(widgets : Set(Class)) post (trim())]
[if (not widgets->oclIsUndefined())]
[for (w : Class | widgets)]
public void initialize[w.getWidgetName().toUpperFirst()/]() {
	[w.initializeWidget('')/]
}
[writeWidgetInit(w.getXisWidgets())/]
[/for]
[/if]
[/template]

[template public writeWidgetTypeAndName(c : Class) post (trim())]
[if (c.isXisLabel())]
XisLabel mLabel[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
XisTextBox mEditText[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
XisCheckBox mCheckBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
XisButton mButton[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
XisLink mLink[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
XisImage mImage[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
DatePicker mDatePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
TimePicker mTimePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
WebView mWeb[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
MapView mMap[c.name.toUpperFirst()/]
[elseif (c.isList())]
ListView mList[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
Spinner mSpinner[c.name.toUpperFirst()/]
[/if]
[/template]
