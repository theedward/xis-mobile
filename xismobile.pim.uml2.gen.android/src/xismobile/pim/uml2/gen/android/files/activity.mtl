[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::widget /]

[template public generateActivity(c : Class)]
[file ('src/'.concat(c.name.toUpperFirst().concat('Activity.java')), false, 'UTF-8')]
[let widgets : OrderedSet(Class) = c.getWidgetsWithGestures()]
package [c.getPackagePath()/];

import android.os.Bundle;
import android.app.Activity;
[if (c.hasMenu())]
import android.view.Menu;
[/if]
[if (widgets->size() > 0)]
import xis_mobile.library.widgets.*;
[/if]


public class [c.name.toUpperFirst()/]Activity extends Activity {

[if (c.needsDbConnection())]
	private OrmLiteHelper db = null;

[elseif (c.needsDomainViews())]
	private DomainEntityManager manager = null;

[/if]
	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerCase()/]);
		[if (widgets->size() > 0)]
		initializeWidgets();
		[/if]
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		[if (c.needsDbConnection())]
		if (db != null) {
			OpenHelperManager.releaseHelper();
			db = null;
		}
		[elseif (c.needsDomainViews())]
		if (manager != null) {
			manager = null;
		}
		[/if]
	}
	[if (widgets->size() > 0)]

	public void initializeWidgets() {
		[for (w : Class | widgets)]
		initialize[w.getWidgetName().toUpperFirst()/]();
		[/for]
	}

	[for (w : Class | widgets)]
	public void initialize[w.getWidgetName().toUpperFirst()/]() {
		[w.initializeWidget()/]
	}
	[/for]
	[/if]
[/let]
[if (c.hasMenu())]
	[let m : Class = c.getMenu()]

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.[m.name.toLowerFirst()/], menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
	[for (it : Class | m.getItems())]
		case R.id.item_[it.name.toLowerCase()/]:
	[if (it.hasXisAction())]
		[let op : Operation = it.getXisAction()]
		[if (op.isCancelAction())]
			finish();
		[elseif (op.isNavigateToAction())]
			[if (op.XisArgumentExists('interactionSpace', 'value'))]
			Intent intent = new Intent(this, [op.getXisArgumentValueByName('interactionSpace', 'value').toUpperFirst()/]Activity.class);
			startActivity(intent);
			[else]
			[writeTODO()/]
			[/if]
		[elseif (op.isSaveAction())]
		[comment] TODO Create/Update Entity by name[/comment]
		[elseif (op.isDeleteteAction())]
		[comment] TODO Delete Entity by name[/comment]
		[elseif (op.isDeleteteAllAction())]
		[comment] TODO Delete all entities[/comment]
		[elseif (op.isWebServiceAction())]
			[op.name.toLowerFirst()/]();
		[elseif (op.isCustomAction())]
			[op.writeCustomActionCall()/]
		[/if]
		[/let]
	[/if]
			return true;
	[/for]
		default:
			return super.onOptionsItemSelected(item);
		}
	}
	[/let]
[/if]
[let wsl : Set(Operation) = c.getAllWebServiceActions()]
	[if (wsl->size() > 0)]

	[c.writeWebServiceArea()/]
	[/if]
[/let]
[let cls : Set(Operation) = c.getAllCustomActions()]
	[if (cls->size() > 0)]

	[cls->writeCustomActionArea()/]
	[/if]
[/let]
	[if (c.needsDbConnection())]

	private OrmLiteHelper getDbHelper() {
		if (db == null) {
			db = OpenHelperManager.getHelper(this, OrmLiteHelper.class); 
		}
		return db;
	}
	[elseif (c.needsDomainViews())]
	private DomainEntityManager getManager() {
		if (manager == null) {
			manager = new DomainEntityManager(this);  
		}
		return manager;
	}	
	[/if]
}
[/file]
[/template]
