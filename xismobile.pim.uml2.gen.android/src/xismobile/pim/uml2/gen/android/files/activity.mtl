[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::widget /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateActivity(c : Class)]
[file ('src/'.concat(c.name.toUpperFirst().concat('Activity.java')), false, 'UTF-8')]
[let widgets : OrderedSet(Class) = c.getWidgetsWithGestures()]
package [c.getPackagePath()/];

import android.os.Bundle;
import android.app.Activity;
[if (c.hasMenu())]
import android.view.Menu;
[/if]
[if (widgets->hasDatePicker() or widgets->hasTimePicker())]
import java.util.Calendar;
[if (widgets->hasDatePicker())]
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
[/if]
[if (widgets->hasTimePicker())]
import android.app.TimePickerDialog;
import android.app.TimePickerDialog.OnTimeSetListener;
[/if]
[/if]
[if (widgets->size() > 0)]

import xis_mobile.library.widgets.*;
[/if]
[let entities : Set(Class) = c.getInteractionSpaceReferencedEntities()]
[for (entity : Class | entities)]
import domain.[entity.name.toUpperFirst()/];
[/for]

public class [c.name.toUpperFirst()/]Activity extends Activity {

[let dbNeeded : Boolean = entities->needsDbHelper()]
[let managerNeeded : Boolean = entities->needsEntityManager()]
[if (dbNeeded)]
	private OrmLiteHelper helper;
[/if]
[if (managerNeeded)]
	private DomainEntityManager manager;
[/if]
	[for (w : Class | widgets)]
	private [w.writeWidgetTypeAndName()/];
	[/for]
	[if (widgets->hasDatePicker() or widgets->hasTimePicker())]
	private final Calendar mCalendar = Calendar.getInstance(); 
	[/if]

	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerCase()/]);
		[if (dbNeeded)]
		getDbHelper();
		[/if]
		[if (managerNeeded)]
		getManager();
		[/if]
		[if (widgets->size() > 0)]
		initializeWidgets();
		[/if]
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		[if (dbNeeded)]
		if (helper != null) {
			OpenHelperManager.releaseHelper();
			helper.close();
			helper = null;
		}
		[/if]
		[if (managerNeeded)]
		if (manager != null) {
			manager = null;
		}
		[/if]
	}
	[if (widgets->size() > 0)]

	public void initializeWidgets() {
		[for (w : Class | widgets)]
		initialize[w.getWidgetName().toUpperFirst()/]();
		[/for]
	}

	[for (w : Class | widgets)]
	public void initialize[w.getWidgetName().toUpperFirst()/]() {
		[w.initializeWidget()/]
	}
	[/for]
	[if (widgets->hasDatePicker())]

	public void setDatePicker(View v)
	{
		int yearC = mCalendar.get(Calendar.YEAR);
		int monthC = mCalendar.get(Calendar.MONTH);
		int dayC = mCalendar.get(Calendar.DAY_OF_MONTH);
		
		new DatePickerDialog(this, new OnDateSetListener() {
			
			@Override
			public void onDateSet(DatePicker view, int year, int monthOfYear,
					int dayOfMonth) {
				mDatePickerBtn.setText(String.format("%s-%s-%s", year, monthOfYear+1,
					dayOfMonth));
				mCalendar.set(year, monthOfYear, dayOfMonth);
			}
		}, yearC, monthC, dayC).show();
	}
	[/if]
	[if (widgets->hasTimePicker())]

	public void setTimePicker(View v)
	{
		int hour = mCalendar.get(Calendar.HOUR_OF_DAY);
		int minutes = mCalendar.get(Calendar.MINUTE);
		
		new TimePickerDialog(this, new OnTimeSetListener() {
			
			@Override
			public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
				mTimePickerBtn.setText(String.format("%s:%s", hourOfDay, minute));
				mCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
				mCalendar.set(Calendar.MINUTE, minute);
			}
		}, hour, minutes, true).show();
	}
	[/if]
	[/if]
[if (c.hasMenu())]
	[let m : Class = c.getMenu()]

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.[m.name.toLowerFirst()/], menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
	[for (it : Class | m.getItems())]
		case R.id.item_[it.name.toLowerCase()/]:
	[if (it.hasXisAction())]
		[let op : Operation = it.getXisAction()]
		[op.writeXisAction()/]
		[/let]
	[/if]
			return true;
	[/for]
		default:
			return super.onOptionsItemSelected(item);
		}
	}
	[/let]
[/if]
[let wsl : Set(Operation) = c.getAllWebServiceActions()]
	[if (wsl->size() > 0)]

	[c.writeWebServiceArea()/]
	[/if]
[/let]
[let cls : Set(Operation) = c.getAllCustomActions()]
	[if (cls->size() > 0)]

	[cls->writeCustomActionArea()/]
	[/if]
[/let]
[if (dbNeeded)]

	private OrmLiteHelper getDbHelper() {
		if (helper == null) {
			helper = OpenHelperManager.getHelper(getApplicationContext(), OrmLiteHelper.class); 
		}
		return helper;
	}
[/if]
[if (managerNeeded)]
	private DomainEntityManager getManager() {
		if (manager == null) {
			manager = new DomainEntityManager(getApplicationContext());  
		}
		return manager;
	}	
[/if]
}
[/let]
[/let]
[/let]
[/let]
[/file]
[/template]

[template public writeWidgetTypeAndName(c : Class)]
[if (c.isXisLabel())]
XisLabel label[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
XisTextBox editText[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
XisCheckBox checkBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
XisButton button[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
XisLink link[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
XisImage image[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
XisDatePicker datePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
XisTimePicker timePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
XisWebView webView[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
XisMapView mapView[c.name.toUpperFirst()/]
[elseif (c.isList())]
ListView list[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
Spinner spinner[c.name.toUpperFirst()/]
[/if]
[/template]
