[comment encoding = UTF-8 /]
[module widget('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::adapter /]
[import xismobile::pim::uml2::gen::android::files::strings /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public getWidgetName(c : Class) post (trim())]
[if (c.isXisLabel())]
mLabel[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
mEditText[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
mCheckBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
mButton[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
mDatePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
mTimePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
mWebView[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
mMapView[c.name.toUpperFirst()/]
[elseif (c.isXisCompositeWidget() and c.isList())]
mList[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
mSpinner[c.name.toUpperFirst()/]
[/if]
[/template]

[template public initializeWidget(c : Class, action : String) post (trim())]
[if (c.isXisLabel())]
mLabel[c.name.toUpperFirst()/] = (XisLabel)findViewById(R.id.label[c.name.toUpperFirst()/]);
[if ((action = 'update' or action = 'read') and c.hasXisWidgetDomainValue(c.getXisWidget()))]
String value = String.valueOf(<entity>.<attribute>);
mLabel.setText(value);
[/if]
[c.writeXisGestureManager()/]
[elseif (c.isXisTextBox())]
mEditText[c.name.toUpperFirst()/] = (XisTextBox)findViewById(R.id.editText[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisCheckBox())]
mCheckBox[c.name.toUpperFirst()/] = (XisCheckBox)findViewById(R.id.checkBox[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/] = (XisImage)findViewById(R.id.image[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisDatePicker())]
mDatePicker[c.name.toUpperFirst()/] = (XisDatePicker)findViewById(R.id.datePicker[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisLabel())]
mLink[c.name.toUpperFirst()/] = (XisLink)findViewById(R.id.link[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisTimePicker())]
mTimePicker[c.name.toUpperFirst()/] = (XisTimePicker)findViewById(R.id.timePicker[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisWebView())]
mWeb[c.name.toUpperFirst()/] = (XisWebView)findViewById(R.id.web[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisMapView())]
mMap[c.name.toUpperFirst()/] = (XisMapView)findViewById(R.id.map[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisCompositeWidget() and c.isList())]
mList[c.name.toUpperFirst()/] = (ListView)findViewById(R.id.list[c.name.toUpperFirst()/]);
[let entity : Class = c.getListEntity()]
[let item : Class = c.getItems()->at(1)]
mList[c.name.toUpperFirst()/].setAdapter(new TaskAdapter(getApplicationContext(), R.layout.[item.name.toUpperFirst()/]_item, [entity.name.toLowerFirst()/]s));
[item.generateListItem()/]
[c.generateAdapter(entity)/]
[/let]
[/let]
[elseif (c.isXisButton())]
mButton[c.name.toUpperFirst()/] = (XisButton)findViewById(R.id.button[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/] = (XisLink)findViewById(R.id.link[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisDropdown())]
mSpinner[c.name.toUpperFirst()/] = (Spinner)findViewById(R.id.spinner[c.name.toUpperFirst()/]);
[/if]
[/template]

[template public getXisGestureManagerName(c : Class) post (trim())]
[if (c.isXisLabel())]
XisLabelGestureManager
[elseif (c.isXisTextBox())]
XisTextBoxGestureManager
[elseif (c.isXisCheckBox())]
XisCheckBoxGestureManager
[elseif (c.isXisButton())]
XisButtonGestureManager
[elseif (c.isXisLink())]
XisLinkGestureManager
[elseif (c.isXisImage())]
XisImageGestureManager
[elseif (c.isXisDatePicker())]
XisDatePickerGestureManager
[elseif (c.isXisTimePicker())]
XisTimePickerGestureManager
[elseif (c.isXisWebView())]
XisWebViewGestureManager
[elseif (c.isXisMapView())]
XisMapViewGestureManager
[elseif (c.isXisDropdown())]
XisDropdownGestureManager
[/if]
[/template]

[template public writeXisGestureManager(c : Class)]
[let gestures : OrderedSet(Class) = c.getWidgetGestures()]
[c.getWidgetName()/].setXisGestureManager(new [c.getXisGestureManagerName()/]() {
[if (c.isXisButton() or c.isXisLink())]
	[writeOnTapDefault(c, gestures)/]
[else]
	[writeOnTap(gestures)/]
[/if]
	[writeOnDoubleTap(gestures)/]
	[writeOnLongTap(gestures)/]
[if (c.isXisTextBox() or c.isXisImage() or c.isXisWebView() or c.isXisMapView())]
	[writeOnSwipe(gestures)/]
[/if]
[if (c.isXisImage() or c.isXisWebView() or c.isXisMapView())]
	[writeOnStretch(gestures)/]
	[writeOnPinch(gestures)/]
[/if]
});
[/let]
[/template]

[template public writeOnTap(gestures : OrderedSet(Class))]
@Override
public void onTap() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isTapGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeOnTapDefault(c : Class, gestures : OrderedSet(Class))]
@Override
public void onTap() {
[let s : Stereotype = 
	if c.isXisButton()
	then c.getXisButton()
	else c.getXisLink()
	endif
]
[let op : OclAny = c.getDefaultOnTapGesture(s)]
[if (not op.oclIsUndefined())]
	[op.oclAsType(Operation).writeXisAction()/]
[else]
	[writeTODO()/]
[/if]
[/let]
[/let]
}
[/template]
	
[template public writeOnDoubleTap(gestures : OrderedSet(Class))]
@Override
public void onDoubleTap() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isDoubleTapGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeOnLongTap(gestures : OrderedSet(Class))]
@Override
public void onLongTap() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isLongTapGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeOnSwipe(gestures : OrderedSet(Class))]
@Override
public void onStretch() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isSwipeGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeOnStretch(gestures : OrderedSet(Class))]
@Override
public void onStretch() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isStretchGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeOnPinch(gestures : OrderedSet(Class))]
@Override
public void onPinch() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isPinchGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeWidget(widgets : Sequence(Class), c : Class) post (trim())]
[if (c.isXisLabel())]
[writeLabel(widgets, c)/]
[elseif (c.isXisTextBox())]
[writeTextBox(widgets, c)/]
[elseif (c.isXisCheckBox())]
[writeCheckBox(widgets, c)/]
[elseif (c.isXisButton())]
[writeButton(widgets, c)/]
[elseif (c.isXisLink())]
[writeLink(widgets, c)/]
[elseif (c.isXisImage())]
[writeImageView(widgets, c)/]
[elseif (c.isXisDatePicker())]
[writeDatePicker(widgets, c)/]
[elseif (c.isXisTimePicker())]
[writeTimePicker(widgets, c)/]
[elseif (c.isXisWebView())]
[writeWebView(widgets, c)/]
[elseif (c.isXisMapView())]
[writeMapView(widgets, c)/]
[elseif (c.isList())]
[writeListView(c)/]
[elseif (c.isXisDropdown())]
[writeDropdown(widgets, c)/]
[/if]
[/template]

[template public writePageTitle(c : Class)]
<TextView
[let name : String = 'label' + c.name.toUpperFirst() + 'Title']
	android:id="@+id/[name/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	android:layout_centerHorizontal="true"
	[let value : String = c.getTitle()]
	android:text="[addString(name + '_text', value)/]"
	[/let]
[/let]
/>
[/template]

[template public writeLabel(widgets : Sequence(Class), c : Class)]
<TextView
[let name : String = 'label' + c.name.toUpperFirst()]
	android:id="@+id/[name/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
[let value : String = c.getXisWidgetValue(c.getXisLabel())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
[/let]
/>
[/template]

[template public writeTextBox(widgets : Sequence(Class), c : Class)]
<EditText
[let name : String = 'editText' + c.name.toUpperFirst()]
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:ems="10"
	[if (c.getXisTexBoxLines() > 1)]
	android:inputType="textMultiLine"
	[/if]
	android:minLines="[c.getXisTexBoxLines()/]"
	android:gravity="top"
	android:scrollbars="vertical"
	[if (c.XisTextBoxHasHint())]
	android:hint="[addString(name + '_hint', c.getXisTexBoxHint())/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisTextBox())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
[/let]
/>
[/template]

[template public writeCheckBox(widgets : Sequence(Class), c : Class)]
[let name : String = 'checkBox' + c.name.toUpperFirst()]
<CheckBox android:id="@+id/[name/]"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
    [if (c.hasXisAction())]
	android:onClick="[c.getXisAction().name.toLowerFirst()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisCheckBox())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
[/let]
/>
[/template]

[template public writeButton(widgets : Sequence(Class), c : Class)]
[let name : String = 'button' + c.name.toUpperFirst()]
<Button
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	[if (c.hasXisAction())]
	android:onClick="[c.getXisAction().name.toLowerFirst()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisButton())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template public writeLink(widgets : Sequence(Class), c : Class)]
[let name : String = 'link' + c.name.toUpperFirst()]
<TextView
	android:id="@+id/link[c.name.toUpperFirst()/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:autolink="web"
	android:text="[addString(name + '_text', c.getXisLinkURL())/]"
/>
[/let]
[/template]

[template public writeImageView(widgets : Sequence(Class), c : Class)]
[let name : String = 'image' + c.name.toUpperFirst()]
<ImageView
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:src="[addString(name + '_src', c.getXisImagePath())/]"
/>
[/let]
[/template]

[template public writeDatePicker(widgets : Sequence(Class), c : Class)]
[let name : String = 'datePicker' + c.name.toUpperFirst()]
<Button
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:onClick="showDatePicker[name.toUpperFirst()/]Dialog"
[let value : String = c.getXisDatePickerValue()]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template public writeTimePicker(widgets : Sequence(Class), c : Class)]
[let name : String = 'timePicker' + c.name.toUpperFirst()]
<Button
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:onClick="showTimePicker[name.toUpperFirst()/]Dialog"
[let value : String = c.getXisTimePickerValue()]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template public writeWebView(widgets : Sequence(Class), c : Class)]
[let name : String = 'webView' + c.name.toUpperFirst()]
<WebView xmlns:android="http://schemas.android.com/apk/res/android"
	android:id="@+id/[name/]"
	android:layout_width="fill_parent"
	android:layout_height="fill_parent"
	[writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template public writeMapView(widgets : Sequence(Class), c : Class)]
[let name : String = 'mapView' + c.name.toUpperFirst()]
<fragment
	android:id="@+id/[name/]"
	android:name="xis_mobile.library.widgets.XisMapView"
	android:layout_width="fill_parent"
	android:layout_height="fill_parent"
	[writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template public writeListView(c : Class)]
[if (c.listIsSearchable())]
[let name : String = 'search' + c.name.toUpperFirst()]
<EditText
    android:id="@+id/[name/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:drawableRight="@android:drawable/ic_search_category_default"
    android:ems="10"
    android:hint="[addString(name + '_hint', 'Search...')/]" >
    <requestFocus />
</EditText>
[/let]
[/if]
<ListView
	android:id="@+id/list[c.name.toUpperFirst()/]"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	android:layout_centerHorizontal="true"
/>
[/template]

[template public writeDropdown(widgets : Sequence(Class), c : Class)]
[let name : String = 'spinner' + c.name.toUpperFirst()]
<Spinner
    android:id="@+id/[name/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template public generateListItem(c : Class)]

[file ('res/layout/' + c.name.toLowerCase() + '_item.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

[let widgets : Sequence(Class) = orderWidgetsByPosition(c.getXisWidgets()->asSequence())]
[for (cl : Class | widgets)]
	[writeWidget(widgets, cl)/]
[/for]
[/let]

</RelativeLayout>
[/file]
[/template]
