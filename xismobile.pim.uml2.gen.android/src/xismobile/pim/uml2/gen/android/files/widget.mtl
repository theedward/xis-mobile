[comment encoding = UTF-8 /]
[module widget('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::adapter /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public getWidgetName(c : Class) post (trim())]
[if (c.isXisLabel())]
mLabel[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
mEditText[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
mCheckBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
mButton[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
mDatePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
mTimePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
mWebView[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
mMapView[c.name.toUpperFirst()/]
[elseif (c.isXisCompositeWidget() and c.isList())]
mList[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
mSpinner[c.name.toUpperFirst()/]
[/if]
[/template]

[template public initializeWidget(c : Class, action : String) post (trim())]
[if (c.isXisLabel())]
mLabel[c.name.toUpperFirst()/] = (XisLabel)findViewById(R.id.label[c.name.toUpperFirst()/]);
[if ((action = 'update' or action = 'read') and c.hasXisWidgetDomainValue(c.getXisWidget()))]
String value = String.valueOf(<entity>.<attribute>);
mLabel.setText(value);
[/if]
[c.writeXisGestureManager()/]
[elseif (c.isXisTextBox())]
mEditText[c.name.toUpperFirst()/] = (XisTextBox)findViewById(R.id.editText[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisCheckBox())]
mCheckBox[c.name.toUpperFirst()/] = (XisCheckBox)findViewById(R.id.checkBox[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/] = (XisImage)findViewById(R.id.image[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisDatePicker())]
mDatePicker[c.name.toUpperFirst()/] = (Button)findViewById(R.id.datePicker[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisTimePicker())]
mTimePicker[c.name.toUpperFirst()/] = (Button)findViewById(R.id.timePicker[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisWebView())]
mWeb[c.name.toUpperFirst()/] = (XisWebView)findViewById(R.id.web[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisMapView())]
mMap[c.name.toUpperFirst()/] = (XisMapView)findViewById(R.id.map[c.name.toUpperFirst()/]);
[c.writeXisGestureManager()/]
[elseif (c.isXisCompositeWidget() and c.isList())]
mList[c.name.toUpperFirst()/] = (ListView)findViewById(R.id.list[c.name.toUpperFirst()/]);
mList[c.name.toUpperFirst()/].setAdapter();
[comment][c.generateAdapter()/][/comment]
[elseif (c.isXisButton())]
mButton[c.name.toUpperFirst()/] = (XisButton)findViewById(R.id.button[c.name.toUpperFirst()/]);
[c.writeXisGestureManagerWithDefault(c.getXisButton())/]
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/] = (XisLink)findViewById(R.id.link[c.name.toUpperFirst()/]);
[c.writeXisGestureManagerWithDefault(c.getXisLink())/]
[elseif (c.isXisDropdown())]
mSpinner[c.name.toUpperFirst()/] = (Spinner)findViewById(R.id.spinner[c.name.toUpperFirst()/]);
[/if]
[/template]

[template public writeXisGestureManager(c : Class)]
[let name : String = c.getWidgetName()]
[let gestures : OrderedSet(Class) = c.getWidgetGestures()]
[c.getWidgetName()/].setXisGestureManager(new XisGestureManager() {

	@Override
	public void onTapGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
	
	@Override
	public void onDoubleTapGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isDoubleTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}

	@Override
	public void onLongTapGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isLongTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}

	@Override
	public void onSwipeGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isSwipeGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
	
	@Override
	public void onStretchGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isStretchGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
	
	@Override
	public void onPinchGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isPinchGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
});
[/let]
[/let]
[/template]

[template public writeXisGestureManagerWithDefault(c : Class, s : Stereotype)]
[let name : String = c.getWidgetName()]
[let gestures : OrderedSet(Class) = c.getWidgetGestures()]
[let op : OclAny = c.getDefaultOnTapGesture(s)]
[if (not op.oclIsUndefined() or gestures->size() > 0)]
[c.getWidgetName()/].setXisGestureManager(new XisGestureManager() {

	@Override
	public void onTapGesture() {
	[if (not op.oclIsUndefined())]
		[op.oclAsType(Operation).writeXisAction()/]
	[else]
		[writeTODO()/]
	[/if]
	}
	
	@Override
	public void onDoubleTapGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isDoubleTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}

	@Override
	public void onLongTapGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isLongTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}

	@Override
	public void onSwipeGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isSwipeGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
	
	@Override
	public void onStretchGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isStretchGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
	
	@Override
	public void onPinchGesture() {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isPinchGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[else]
		[writeTODO()/]
	[/if]
	[/let]
	}
});
[/if]
[/let]
[/let]
[/let]
[/template]

[template public writeWidget(c : Class)]
[if (c.isXisLabel())]
[c.writeLabel()/]
[elseif (c.isXisTextBox())]
[c.writeTextBox()/]
[elseif (c.isXisCheckBox())]
[c.writeCheckBox()/]
[elseif (c.isXisButton())]
[c.writeButton()/]
[elseif (c.isXisLink())]
[c.writeLink()/]
[elseif (c.isXisImage())]
[c.writeImageView()/]
[elseif (c.isXisDatePicker())]
[c.writeDatePicker()/]
[elseif (c.isXisTimePicker())]
[c.writeTimePicker()/]
[elseif (c.isXisWebView())]
[c.writeWebView()/]
[elseif (c.isXisMapView())]
[c.writeMapView()/]
[elseif (c.isList())]
[c.writeListView()/]
[elseif (c.isXisDropdown())]
[c.writeDropdown()/]
[/if]
[/template]

[template public writeLabel(c : Class)]
<TextView
	android:id="@+id/label[c.name.toUpperFirst()/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
[let value : String = c.getXisWidgetValue(c.getXisLabel())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[value/]"
	[/if]
[/let]
/>
[/template]

[template public writeTextBox(c : Class)]
<EditText
	android:id="@+id/editText[c.name.toUpperFirst()/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:layout_centerHorizontal="true"
	android:ems="10"
	[if (c.getXisTexBoxLines() > 1)]
	android:inputType="textMultiLine"
	[/if]
	android:minLines="[c.getXisTexBoxLines()/]"
	android:gravity="top"
	android:scrollbars="vertical"
	[if (c.XisTextBoxHasHint())]
	android:hint="[c.getXisTexBoxHint()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisTextBox())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[value/]"
	[/if]
[/let]
/>
[/template]

[template public writeCheckBox(c : Class)]
<CheckBox android:id="@+id/checkBox[c.name.toUpperFirst()/]"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    [if (c.hasXisAction())]
	android:onClick="[c.getXisAction().name.toLowerFirst()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisCheckBox())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[value/]"
	[/if]
[/let]
/>
[/template]

[template public writeButton(c : Class)]
<Button
	android:id="@+id/button[c.name.toUpperFirst()/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[if (c.hasXisAction())]
	android:onClick="[c.getXisAction().name.toLowerFirst()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisButton())]
	[if (not value.oclIsUndefined() and not value.stringContains('.'))]
	android:text="[value/]"
	[/if]
[/let]
/>
[/template]

[template public writeLink(c : Class)]
<TextView
	android:id="@+id/link[c.name.toUpperFirst()/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	android:autolink="web"
	android:text="[c.getXisLinkURL()/]"
/>
[/template]

[template public writeImageView(c : Class)]
<ImageView
	android:id="@+id/image[c.name.toUpperFirst()/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:src="[c.getXisImagePath()/]"
/>
[/template]

[template public writeDatePicker(c : Class)]
<Button
	android:id="@+id/datePicker[c.name.toUpperFirst()/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:onClick="showDatePicker[c.name.toUpperFirst()/]Dialog"
	android:text="[c.getXisDatePickerValue()/]"
/>
[/template]

[template public writeTimePicker(c : Class)]
<Button
	android:id="@+id/timePicker[c.name.toUpperFirst()/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:onClick="showTimePicker[c.name.toUpperFirst()/]Dialog"
	android:text="[c.getXisTimePickerValue()/]"
/>
[/template]

[template public writeWebView(c : Class)]
<WebView xmlns:android="http://schemas.android.com/apk/res/android"
	android:id="@+id/webView[c.name.toUpperFirst()/]"
	android:layout_width="fill_parent"
	android:layout_height="fill_parent"
/>
[/template]

[template public writeMapView(c : Class)]
<com.google.android.maps.MapView
	xmlns:android="http://schemas.android.com/apk/res/android"
	android:id="@+id/mapView[c.name.toUpperFirst()/]"
	android:layout_width="fill_parent"
	android:layout_height="fill_parent"
	android:clickable="true"
	android:apiKey="Your Maps API Key goes here"
/>
[/template]

[template public writeListView(c : Class)]
[if (c.listIsSearchable())]
<EditText
    android:id="@+id/search[c.name.toUpperFirst()/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:drawableRight="@android:drawable/ic_search_category_default"
    android:ems="10"
    android:hint="Search..." >
    <requestFocus />
</EditText>
[/if]
<ListView
	android:id="@+id/list[c.name.toUpperFirst()/]"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	android:layout_alignParentTop="true"
	android:layout_centerHorizontal="true"
/>
[/template]

[template public writeDropdown(c : Class)]
<Spinner
    android:id="@+id/spinner[c.name.toUpperFirst()/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
/>
[/template]
