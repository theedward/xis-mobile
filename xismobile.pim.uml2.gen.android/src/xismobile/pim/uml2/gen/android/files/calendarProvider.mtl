[comment encoding = UTF-8 /]
[module calendarProvider('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]

[template public generateCalendarProvider(c : Class)]

[file ('src/' + c.getPackageDirectoryPath() + '/' + c.name.toUpperFirst() + 'CalendarProvider.java', false, 'UTF-8')]
package [c.getPackagePath()/];

import android.annotation.SuppressLint;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.provider.CalendarContract.Calendars;
import android.provider.CalendarContract.Events;


public class [c.name.toUpperFirst()/]CalendarProvider {

	private Context context;
	private ContentResolver contentResolver;
	
	public [c.name.toUpperFirst()/]CalendarProvider(Context context) {
		this.context = context;
		this.contentResolver = this.context.getContentResolver();
	}

	@SuppressLint("NewApi")
	public long getCalendarId() {
		String['['/][']'/] projection = new String['['/][']'/] { Calendars._ID };
		Uri uri;
		
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
			uri = Calendars.CONTENT_URI;
		} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			uri = Uri.parse("content://com.android.calendar/calendars");
		} else {
			uri = Uri.parse("content://calendar/calendars");
		}
		
		Cursor cursor = contentResolver.query(uri, projection, null, null, null);

	   	if (cursor != null && cursor.moveToFirst()) { 
	   		return cursor.getLong(0); 
	   	}
   		return -1;
	} 

	@SuppressLint("NewApi")
	public void insertEvent(Event event) {
		Uri uri;
		ContentValues values = new ContentValues();
		values.put(Events.CALENDAR_ID, event.getCalendarID());
		values.put(Events.TITLE, event.getTitle());
		values.put(Events.DESCRIPTION, event.getDescription());
		values.put(Events.ORGANIZER, event.getOrganizer());
		values.put(Events.EVENT_LOCATION, event.getLocation());
		values.put(Events.DTSTART, event.getStartTime());
		values.put(Events.DTEND, event.getEndTime());
		values.put(Events.EVENT_TIMEZONE, event.getTimezone());

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
			uri = Events.CONTENT_URI;
		} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			uri = Uri.parse("content://com.android.calendar/events");
		} else {
			uri = Uri.parse("content://calendar/events");
		}
		
		uri = contentResolver.insert(uri, values);
		event.setId(Long.parseLong(uri.getLastPathSegment()));
	}

	@SuppressLint("NewApi")
	public int updateEvent(Event event) {
		Uri uri;
		ContentValues values = new ContentValues();
		values.put(Events.CALENDAR_ID, event.getCalendarID());
		values.put(Events.TITLE, event.getTitle());
		values.put(Events.DESCRIPTION, event.getDescription());
		values.put(Events.ORGANIZER, event.getOrganizer());
		values.put(Events.EVENT_LOCATION, event.getLocation());
		values.put(Events.DTSTART, event.getStartTime());
		values.put(Events.DTEND, event.getEndTime());
		values.put(Events.EVENT_TIMEZONE, event.getTimezone());
		
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
			uri = Events.CONTENT_URI;
		} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			uri = Uri.parse("content://com.android.calendar/events");
		} else {
			uri = Uri.parse("content://calendar/events");
		}
		
		uri = ContentUris.withAppendedId(uri, event.getId());
		return contentResolver.update(uri, values, null, null);
	}

	@SuppressLint("NewApi")
	public int deleteEvent(long eventID) {
		Uri uri;
		
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
			uri = Events.CONTENT_URI;
		} else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			uri = Uri.parse("content://com.android.calendar/events");
		} else {
			uri = Uri.parse("content://calendar/events");
		}
		
		uri = ContentUris.withAppendedId(Events.CONTENT_URI, eventID);
		return contentResolver.delete(uri, null, null);
	}

	public static class Event {
		
		private long id;
		private long calendarID;
		private String title;
		private String description;
		private String organizer;
		private String location;
		private long startTime;
		private long endTime;
		private String timezone;

		public Event() { }

		public Event(long calendarID, String title, String description,
				String organizer, String location, long startTime,
				long endTime, String timezone) {
			this.calendarID = calendarID;
			this.title = title;
			this.description = description;
			this.organizer = organizer;
			this.location = location;
			this.startTime = startTime;
			this.endTime = endTime;
			this.timezone = timezone;
		}

		public long getCalendarID() {
			return calendarID;
		}

		public void setCalendarID(long calendarID) {
			this.calendarID = calendarID;
		}

		public long getId() {
			return id;
		}

		public void setId(long id) {
			this.id = id;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public String getDescription() {
			return description;
		}

		public void setDescription(String description) {
			this.description = description;
		}

		public String getOrganizer() {
			return organizer;
		}

		public void setOrganizer(String organizer) {
			this.organizer = organizer;
		}

		public String getLocation() {
			return location;
		}

		public void setLocation(String location) {
			this.location = location;
		}

		public long getStartTime() {
			return startTime;
		}

		public void setStartTime(long startTime) {
			this.startTime = startTime;
		}

		public long getEndTime() {
			return endTime;
		}

		public void setEndTime(long endTime) {
			this.endTime = endTime;
		}

		public String getTimezone() {
			return timezone;
		}

		public void setTimezone(String timezone) {
			this.timezone = timezone;
		}
	}
}
[/file]
[/template]
